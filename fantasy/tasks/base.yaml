# This tutorial is composed of one task group (base)
# Please see the task overview section of the documentation for more details:
# https://173tech.github.io/sayn/tasks/overview/

presets:
  modelling:
    type: autosql
    file_name: '{{ task.name }}.sql'
    materialisation: table
    destination:
      table: '{{ task.name }}'

  load_get:
    type: python
    class: load_get.LoadData
    tags: load

  load_get_multi:
    type: python
    class: load_get_multi.LoadData
    tags: load





# Task groups define at minimum a set of tasks
# To run the tutorial, run the command 'sayn run' from the project folder's root
tasks:

  # Loading
  load_teams:
    preset: load_get
    parameters:
      name: teams
      api_call: teams
      keys_drop:
        - 'logo_url'


  load_players:
    preset: load_get
    parameters:
      name: players
      api_call: proPlayers
      keys_drop:
        - 'steamid'
        - 'avatar'
        - 'avatarmedium'
        - 'avatarfull'
        - 'profileurl'
        - 'personaname'
        - 'last_login'
        - 'full_history_time'
        - 'cheese'
        - 'fh_unavailable'
        - 'loccountrycode'
        - 'last_match_time'
        - 'plus'
        - 'country_code'
        - 'team_name'
        - 'locked_until'
        - 'is_locked'
        - 'is_pro'
        - 'fantasy_role'


  load_roles:
    type: python
    class: load_roles.LoadData
    parameters:
      url_ti10:  'https://liquipedia.net/dota2/The_International/2021'
      base_url_liq: 'https://liquipedia.net'


  load_proMatches:
    preset: load_get_multi
    parameters:
      name: matches
      api_call: proMatches
      len: 10000
      keys_drop:
        - 'radiant_name'
        - 'dire_name'
        - 'league_name'


  load_jobs:
    type: python
    class: load_post.LoadData
    parents:
      - dim_matches


  request_matches:
    type: python
    class: load_requests.LoadData
    parents:
      - load_jobs


  # Dimensions
  dim_players:
    preset: modelling
    tags: dim
    parents:
      - load_players
      - load_teams
      - load_roles
      - missing_players


  dim_teams:
    preset: modelling
    tags: dim


  dim_matches:
    preset: modelling
    tags: dim
    parameters:
      date: '2021-05-01'
    parents:
      - dim_teams
      - load_proMatches


  # Facts
  f_teams:
    preset: modelling
    tags: fact
    parent:
      - dim_teams


  f_players:
    preset: modelling
    tags: fact
    parent:
      - dim_players


  # Helper
  missing_players:
    preset: modelling
    tags: helper


  # autosql
  # autosql tasks enable to write a SELECT statement and SAYN creates the table / view automatically
  # the SQL queries for those models are stored into the sql folder
  # dim_tournaments:
  #   type: autosql
  #   file_name: dim_tournaments.sql
  #   materialisation: table
  #   destination:
  #     table: dim_tournaments
  #   parents:
  #     - load_data
  #
  # dim_arenas:
  #   type: autosql
  #   file_name: dim_arenas.sql
  #   materialisation: table
  #   destination:
  #     table: dim_arenas
  #   parents:
  #     - load_data
  #
  # dim_fighters:
  #   type: autosql
  #   file_name: dim_fighters.sql
  #   materialisation: table
  #   destination:
  #     table: dim_fighters
  #   parents:
  #     - load_data
  #
  # f_battles:
  #   type: autosql
  #   file_name: f_battles.sql
  #   materialisation: table
  #   destination:
  #     table: f_battles
  #   parents:
  #     - load_data
  #     - dim_tournaments
  #     - dim_arenas
  #     - dim_fighters
  #
  # f_fighter_results:
  #   type: autosql
  #   file_name: f_fighter_results.sql
  #   materialisation: table
  #   destination:
  #     table: f_fighter_results
  #   parents:
  #     - f_battles
  #
  # f_rankings:
  #   type: autosql
  #   file_name: f_rankings.sql
  #   materialisation: view
  #   destination:
  #     table: f_rankings
  #   parents:
  #     - f_fighter_results
